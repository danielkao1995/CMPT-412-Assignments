%% Load and Explore the Image Data
% Load the digit sample data as an |ImageDatastore| object.
 
digitDatasetPath = fullfile('orl_faces');
digitData = imageDatastore(digitDatasetPath,'IncludeSubfolders',true,'LabelSource','foldernames');
 
%Image preprocess functions: rotate, contrast, dim, reflect
%digitData.ReadFcn = @reflect;
 
%% 
% Display some of the images in the datastore. 
%figure;
%perm = randperm(400,20);
%for i = 1:20
%    subplot(4,5,i);
%    imshow(digitData.Files{perm(i)});
%end
 
%%
% Check the number of images in each category. 
%CountLabel = digitData.countEachLabel;
 
%% 
% You must specify the size of the images in the input layer of the
% network. Check the size of the first image in |digitData| .
%img = readimage(digitData,1);
%size(img);
% Each digit image is 112-by-92-by-1 pixels.
 
%% Specify Training and Test Sets
% Divide the data into training and test sets, so that each category in the
% training set has 5 images and the test set has the remaining images
% from each label.
trainingNumFiles = 5;
rng(1) % For reproducibility
[trainDigitData,testDigitData] = splitEachLabel(digitData,trainingNumFiles,'randomize'); 
%image = readimage(trainDigitData, 1);
%NewImage = dim (image, 0.5);
%figure; imshow (NewImage);
%% Define the Network Layers
% Define the convolutional neural network architecture. 
layers = [imageInputLayer([112 92 1])
          
%only change things here for accuracy
          convolution2dLayer(3,5)
          maxPooling2dLayer(2,'Stride',2)
         
%don't need to change anything here
          fullyConnectedLayer(40)
          softmaxLayer
          classificationLayer()];  
 
%% Specify the Training Options
% After defining the layers (network structure), specify the training
% options. Set the options to default settings for the stochastic gradient
% descent with momentum. Set the maximum number of epochs at 15 (an epoch
% is a full training cycle on the whole training data), and start the
% training with an initial learning rate of 0.0001.
options = trainingOptions('sgdm','MaxEpochs',50,'InitialLearnRate',0.001, 'MiniBatchSize',64);  
 
%% Train the Network Using Training Data
% Train the network you defined in layers, using the training data and the
% training options you defined in the previous steps.
convnet = trainNetwork(trainDigitData,layers,options);
 
%% Classify the Images in the Test Data and Compute Accuracy
% Run the trained network on the test set that was not used to train the
% network and predict the image labels (digits).
YTest = classify(convnet,testDigitData);
TTest = testDigitData.Labels;
 
%% 
% Calculate the accuracy. 
accuracy = sum(YTest == TTest)/numel(TTest)   
 
function NewImage = myrotate(image)
%Set theta to 90 degrees clockwise
theta = degtorad (90);
%Table for calculating the angle
angle = [ cos(theta) sin(theta)  0
        -sin(theta) cos(theta)  0
         0           0          1];
%Create structure for affine transformation
T = maketform('affine', angle);
%Apply the angles calculated in the table
NewImage = imtransform(image, T);
%figure, imshow(NewImage);
 
end
function output = dim(image, fraction)
% Create new image by indexing the old image
output = image(:,:,:)*fraction;
% Show New Image
%figure; imshow (output);
end
function NewImage = reflect(image)
NewImage = image(:,end:-1:1, :);
%figure; imshow (NewImage);
end
